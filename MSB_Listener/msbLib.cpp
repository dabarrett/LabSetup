/*
	Auto generated by Don Barrett
*/


#include "msbLib.h"

#define CAN0_MESSAGE_RAM_SIZE (0)
#define CAN1_MESSAGE_RAM_SIZE (1728)

const byte payloadSize = 255;
const byte headerSize = 6;
const int numChars = 264;

// END Header
//************************************



/*------------------------------------------------------------------------------
#    START Code for EntityEnum
#------------------------------------------------------------------------------*/

EntityEnum getEntityEnum(uint32_t integerVal){

    switch (integerVal) {
        case 0:
            return EntityEnum::ALL;
        case 1:
            return EntityEnum::STEREO_MANAGER;
        case 2:
            return EntityEnum::STEREO_COMPUTER;
        case 3:
            return EntityEnum::HEADUNIT_COMPUTER;
        case 4:
            return EntityEnum::LAB_MONITOR;
        case 5:
            return EntityEnum::HEADUNIT_MANAGER;
        case 6:
            return EntityEnum::NONE;
        default:
            return EntityEnum::NONE;
     }

}

uint32_t getEntityEnumValue(EntityEnum e){

    switch (e) {
        case EntityEnum::ALL:
            return 0;
        case EntityEnum::STEREO_MANAGER:
            return 1;
        case EntityEnum::STEREO_COMPUTER:
            return 2;
        case EntityEnum::HEADUNIT_COMPUTER:
            return 3;
        case EntityEnum::LAB_MONITOR:
            return 4;
        case EntityEnum::HEADUNIT_MANAGER:
            return 5;
        case EntityEnum::NONE:
            return 6;
        default:
            return 999;
     }

}

String getEntityEnumString(EntityEnum e){

    switch (e) {
        case EntityEnum::ALL:
            return "EntityEnum::ALL";
        case EntityEnum::STEREO_MANAGER:
            return "EntityEnum::STEREO_MANAGER";
        case EntityEnum::STEREO_COMPUTER:
            return "EntityEnum::STEREO_COMPUTER";
        case EntityEnum::HEADUNIT_COMPUTER:
            return "EntityEnum::HEADUNIT_COMPUTER";
        case EntityEnum::LAB_MONITOR:
            return "EntityEnum::LAB_MONITOR";
        case EntityEnum::HEADUNIT_MANAGER:
            return "EntityEnum::HEADUNIT_MANAGER";
        case EntityEnum::NONE:
            return "EntityEnum::NONE";
        default:
            return "999";
     }

}


/*------------------------------------------------------------------------------
#     END Code for EntityEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for MessageTypeEnum
#------------------------------------------------------------------------------*/

MessageTypeEnum getMessageTypeEnum(uint32_t integerVal){

    switch (integerVal) {
        case 0:
            return MessageTypeEnum::EntityElectricalStatusMDT;
        case 1:
            return MessageTypeEnum::EntityTemperatureStatusMDT;
        case 2:
            return MessageTypeEnum::EntityStatusMDT;
        case 3:
            return MessageTypeEnum::SetEntityStateMDT;
        case 4:
            return MessageTypeEnum::NONE;
        default:
            return MessageTypeEnum::NONE;
     }

}

uint32_t getMessageTypeEnumValue(MessageTypeEnum e){

    switch (e) {
        case MessageTypeEnum::EntityElectricalStatusMDT:
            return 0;
        case MessageTypeEnum::EntityTemperatureStatusMDT:
            return 1;
        case MessageTypeEnum::EntityStatusMDT:
            return 2;
        case MessageTypeEnum::SetEntityStateMDT:
            return 3;
        case MessageTypeEnum::NONE:
            return 4;
        default:
            return 999;
     }

}

String getMessageTypeEnumString(MessageTypeEnum e){

    switch (e) {
        case MessageTypeEnum::EntityElectricalStatusMDT:
            return "MessageTypeEnum::EntityElectricalStatusMDT";
        case MessageTypeEnum::EntityTemperatureStatusMDT:
            return "MessageTypeEnum::EntityTemperatureStatusMDT";
        case MessageTypeEnum::EntityStatusMDT:
            return "MessageTypeEnum::EntityStatusMDT";
        case MessageTypeEnum::SetEntityStateMDT:
            return "MessageTypeEnum::SetEntityStateMDT";
        case MessageTypeEnum::NONE:
            return "MessageTypeEnum::NONE";
        default:
            return "999";
     }

}


/*------------------------------------------------------------------------------
#     END Code for MessageTypeEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for EntityStateEnum
#------------------------------------------------------------------------------*/

EntityStateEnum getEntityStateEnum(uint32_t integerVal){

    switch (integerVal) {
        case 0:
            return EntityStateEnum::LOW_POWER;
        case 1:
            return EntityStateEnum::STARTING;
        case 2:
            return EntityStateEnum::OPERATING;
        case 3:
            return EntityStateEnum::SHUTTING_DOWN;
        case 4:
            return EntityStateEnum::FAULT;
        case 5:
            return EntityStateEnum::RESETTING;
        case 6:
            return EntityStateEnum::NONE;
        default:
            return EntityStateEnum::NONE;
     }

}

uint32_t getEntityStateEnumValue(EntityStateEnum e){

    switch (e) {
        case EntityStateEnum::LOW_POWER:
            return 0;
        case EntityStateEnum::STARTING:
            return 1;
        case EntityStateEnum::OPERATING:
            return 2;
        case EntityStateEnum::SHUTTING_DOWN:
            return 3;
        case EntityStateEnum::FAULT:
            return 4;
        case EntityStateEnum::RESETTING:
            return 5;
        case EntityStateEnum::NONE:
            return 6;
        default:
            return 999;
     }

}

String getEntityStateEnumString(EntityStateEnum e){

    switch (e) {
        case EntityStateEnum::LOW_POWER:
            return "EntityStateEnum::LOW_POWER";
        case EntityStateEnum::STARTING:
            return "EntityStateEnum::STARTING";
        case EntityStateEnum::OPERATING:
            return "EntityStateEnum::OPERATING";
        case EntityStateEnum::SHUTTING_DOWN:
            return "EntityStateEnum::SHUTTING_DOWN";
        case EntityStateEnum::FAULT:
            return "EntityStateEnum::FAULT";
        case EntityStateEnum::RESETTING:
            return "EntityStateEnum::RESETTING";
        case EntityStateEnum::NONE:
            return "EntityStateEnum::NONE";
        default:
            return "999";
     }

}


/*------------------------------------------------------------------------------
#     END Code for EntityStateEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for WifiStateEnum
#------------------------------------------------------------------------------*/

WifiStateEnum getWifiStateEnum(uint32_t integerVal){

    switch (integerVal) {
        case 0:
            return WifiStateEnum::ENABLED;
        case 1:
            return WifiStateEnum::DISABLED;
        case 2:
            return WifiStateEnum::NONE;
        default:
            return WifiStateEnum::NONE;
     }

}

uint32_t getWifiStateEnumValue(WifiStateEnum e){

    switch (e) {
        case WifiStateEnum::ENABLED:
            return 0;
        case WifiStateEnum::DISABLED:
            return 1;
        case WifiStateEnum::NONE:
            return 2;
        default:
            return 999;
     }

}

String getWifiStateEnumString(WifiStateEnum e){

    switch (e) {
        case WifiStateEnum::ENABLED:
            return "WifiStateEnum::ENABLED";
        case WifiStateEnum::DISABLED:
            return "WifiStateEnum::DISABLED";
        case WifiStateEnum::NONE:
            return "WifiStateEnum::NONE";
        default:
            return "999";
     }

}


/*------------------------------------------------------------------------------
#     END Code for WifiStateEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for HeaderType
------------------------------------------------------------------------------*/

EntityEnum HeaderType::getDestination()
{
    return _Destination;
}

void HeaderType::setDestination(EntityEnum Destination)
{
    _Destination = Destination;
}

MessageTypeEnum HeaderType::getMessageType()
{
    return _MessageType;
}

void HeaderType::setMessageType(MessageTypeEnum MessageType)
{
    _MessageType = MessageType;
}

EntityEnum HeaderType::getSender()
{
    return _Sender;
}

void HeaderType::setSender(EntityEnum Sender)
{
    _Sender = Sender;
}


/*------------------------------------------------------------------------------
     END Code for HeaderType
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for MSBMessageBasetype
------------------------------------------------------------------------------*/

HeaderType MSBMessageBasetype::getHeader()
{
    return _Header;
}

void MSBMessageBasetype::setHeader(HeaderType Header)
{
    _Header = Header;
}


/*------------------------------------------------------------------------------
     END Code for MSBMessageBasetype
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for EntityElectricalStaus
------------------------------------------------------------------------------*/

EntityEnum EntityElectricalStaus::getEntityID()
{
    return _EntityID;
}

void EntityElectricalStaus::setEntityID(EntityEnum EntityID)
{
    _EntityID = EntityID;
}

int16_t EntityElectricalStaus::getCurrent()
{
    return _Current;
}

void EntityElectricalStaus::setCurrent(int16_t Current)
{
    _Current = Current;
}

int16_t EntityElectricalStaus::getVoltage()
{
    return _Voltage;
}

void EntityElectricalStaus::setVoltage(int16_t Voltage)
{
    _Voltage = Voltage;
}

int16_t EntityElectricalStaus::getPower()
{
    return _Power;
}

void EntityElectricalStaus::setPower(int16_t Power)
{
    _Power = Power;
}

CANFDMessage EntityElectricalStaus::createNewMessage(HeaderType ht)
{
    CANFDMessage fdMsg;
    fdMsg.ext = true;
    fdMsg.id = calculateFDID(ht);
    fdMsg.data_s16[0] = getEntityEnumValue(_EntityID);
    fdMsg.data_s16[1] = _Current;
    fdMsg.data_s16[2] = _Voltage;
    fdMsg.data_s16[3] = _Power;
    fdMsg.len = 8;
    fdMsg.pad();
    return fdMsg;
}

void EntityElectricalStaus::clearMessage()
{
    _EntityID = EntityEnum::NONE;
    _Current = 0;
    _Voltage = 0;
    _Power = 0;
}

void EntityElectricalStaus::updateFromFDMessage(CANFDMessage fdMsg)
{
    _EntityID = getEntityEnum(fdMsg.data_s16[0]);
    _Current = fdMsg.data_s16[1];
    _Voltage = fdMsg.data_s16[2];
    _Power = fdMsg.data_s16[3];
}

String EntityElectricalStaus::createSerialPayload()
{
    String str;
    str.concat(String(getEntityEnumValue(_EntityID)));
    str.concat(",");
    str.concat(String(_Current));
    str.concat(",");
    str.concat(String(_Voltage));
    str.concat(",");
    str.concat(String(_Power));
    return str;
}

void EntityElectricalStaus::parseSerialPayload(char payload[255])
{
    char * strtokIndx;

    strtokIndx = strtok(payload,",");
    _EntityID = getEntityEnum(strtoul(strtokIndx,NULL,0));

    strtokIndx = strtok(NULL,",");
    _Current = strtoul(strtokIndx,NULL,0);

    strtokIndx = strtok(NULL,",");
    _Voltage = strtoul(strtokIndx,NULL,0);

    strtokIndx = strtok(NULL,",");
    _Power = strtoul(strtokIndx,NULL,0);

}

void EntityElectricalStaus::parseSerialPayload(String payload)
{
    char out[255];

    payload.toCharArray(out,255);

    parseSerialPayload(out);

}


/*------------------------------------------------------------------------------
     END Code for EntityElectricalStaus
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for EntityTemperatureStatus
------------------------------------------------------------------------------*/

EntityEnum EntityTemperatureStatus::getEntityID()
{
    return _EntityID;
}

void EntityTemperatureStatus::setEntityID(EntityEnum EntityID)
{
    _EntityID = EntityID;
}

int16_t EntityTemperatureStatus::getTemperature()
{
    return _Temperature;
}

void EntityTemperatureStatus::setTemperature(int16_t Temperature)
{
    _Temperature = Temperature;
}

CANFDMessage EntityTemperatureStatus::createNewMessage(HeaderType ht)
{
    CANFDMessage fdMsg;
    fdMsg.ext = true;
    fdMsg.id = calculateFDID(ht);
    fdMsg.data_s16[0] = getEntityEnumValue(_EntityID);
    fdMsg.data_s16[1] = _Temperature;
    fdMsg.len = 4;
    fdMsg.pad();
    return fdMsg;
}

void EntityTemperatureStatus::clearMessage()
{
    _EntityID = EntityEnum::NONE;
    _Temperature = 0;
}

void EntityTemperatureStatus::updateFromFDMessage(CANFDMessage fdMsg)
{
    _EntityID = getEntityEnum(fdMsg.data_s16[0]);
    _Temperature = fdMsg.data_s16[1];
}

String EntityTemperatureStatus::createSerialPayload()
{
    String str;
    str.concat(String(getEntityEnumValue(_EntityID)));
    str.concat(",");
    str.concat(String(_Temperature));
    return str;
}

void EntityTemperatureStatus::parseSerialPayload(char payload[255])
{
    char * strtokIndx;

    strtokIndx = strtok(payload,",");
    _EntityID = getEntityEnum(strtoul(strtokIndx,NULL,0));

    strtokIndx = strtok(NULL,",");
    _Temperature = strtoul(strtokIndx,NULL,0);

}

void EntityTemperatureStatus::parseSerialPayload(String payload)
{
    char out[255];

    payload.toCharArray(out,255);

    parseSerialPayload(out);

}


/*------------------------------------------------------------------------------
     END Code for EntityTemperatureStatus
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for EntityStatus
------------------------------------------------------------------------------*/

EntityEnum EntityStatus::getEntityID()
{
    return _EntityID;
}

void EntityStatus::setEntityID(EntityEnum EntityID)
{
    _EntityID = EntityID;
}

EntityStateEnum EntityStatus::getState()
{
    return _State;
}

void EntityStatus::setState(EntityStateEnum State)
{
    _State = State;
}

int16_t EntityStatus::getErrorFlag()
{
    return _ErrorFlag;
}

void EntityStatus::setErrorFlag(int16_t ErrorFlag)
{
    _ErrorFlag = ErrorFlag;
}

CANFDMessage EntityStatus::createNewMessage(HeaderType ht)
{
    CANFDMessage fdMsg;
    fdMsg.ext = true;
    fdMsg.id = calculateFDID(ht);
    fdMsg.data_s16[0] = getEntityEnumValue(_EntityID);
    fdMsg.data_s16[1] = getEntityStateEnumValue(_State);
    fdMsg.data_s16[2] = _ErrorFlag;
    fdMsg.len = 6;
    fdMsg.pad();
    return fdMsg;
}

void EntityStatus::clearMessage()
{
    _EntityID = EntityEnum::NONE;
    _State = EntityStateEnum::NONE;
    _ErrorFlag = 0;
}

void EntityStatus::updateFromFDMessage(CANFDMessage fdMsg)
{
    _EntityID = getEntityEnum(fdMsg.data_s16[0]);
    _State = getEntityStateEnum(fdMsg.data_s16[1]);
    _ErrorFlag = fdMsg.data_s16[2];
}

String EntityStatus::createSerialPayload()
{
    String str;
    str.concat(String(getEntityEnumValue(_EntityID)));
    str.concat(",");
    str.concat(String(getEntityStateEnumValue(_State)));
    str.concat(",");
    str.concat(String(_ErrorFlag));
    return str;
}

void EntityStatus::parseSerialPayload(char payload[255])
{
    char * strtokIndx;

    strtokIndx = strtok(payload,",");
    _EntityID = getEntityEnum(strtoul(strtokIndx,NULL,0));

    strtokIndx = strtok(NULL,",");
    _State = getEntityStateEnum(strtoul(strtokIndx,NULL,0));

    strtokIndx = strtok(NULL,",");
    _ErrorFlag = strtoul(strtokIndx,NULL,0);

}

void EntityStatus::parseSerialPayload(String payload)
{
    char out[255];

    payload.toCharArray(out,255);

    parseSerialPayload(out);

}


/*------------------------------------------------------------------------------
     END Code for EntityStatus
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
     START Code for SetEntityState
------------------------------------------------------------------------------*/

EntityEnum SetEntityState::getEntityID()
{
    return _EntityID;
}

void SetEntityState::setEntityID(EntityEnum EntityID)
{
    _EntityID = EntityID;
}

EntityStateEnum SetEntityState::getTargetState()
{
    return _TargetState;
}

void SetEntityState::setTargetState(EntityStateEnum TargetState)
{
    _TargetState = TargetState;
}

CANFDMessage SetEntityState::createNewMessage(HeaderType ht)
{
    CANFDMessage fdMsg;
    fdMsg.ext = true;
    fdMsg.id = calculateFDID(ht);
    fdMsg.data_s16[0] = getEntityEnumValue(_EntityID);
    fdMsg.data_s16[1] = getEntityStateEnumValue(_TargetState);
    fdMsg.len = 4;
    fdMsg.pad();
    return fdMsg;
}

void SetEntityState::clearMessage()
{
    _EntityID = EntityEnum::NONE;
    _TargetState = EntityStateEnum::NONE;
}

void SetEntityState::updateFromFDMessage(CANFDMessage fdMsg)
{
    _EntityID = getEntityEnum(fdMsg.data_s16[0]);
    _TargetState = getEntityStateEnum(fdMsg.data_s16[1]);
}

String SetEntityState::createSerialPayload()
{
    String str;
    str.concat(String(getEntityEnumValue(_EntityID)));
    str.concat(",");
    str.concat(String(getEntityStateEnumValue(_TargetState)));
    return str;
}

void SetEntityState::parseSerialPayload(char payload[255])
{
    char * strtokIndx;

    strtokIndx = strtok(payload,",");
    _EntityID = getEntityEnum(strtoul(strtokIndx,NULL,0));

    strtokIndx = strtok(NULL,",");
    _TargetState = getEntityStateEnum(strtoul(strtokIndx,NULL,0));

}

void SetEntityState::parseSerialPayload(String payload)
{
    char out[255];

    payload.toCharArray(out,255);

    parseSerialPayload(out);

}


/*------------------------------------------------------------------------------
     END Code for SetEntityState
------------------------------------------------------------------------------*/

//************************************
// Start Standard Functions



uint32_t calculateFDID(HeaderType ht){
	
	return getEntityEnumValue(ht.getDestination()) * 10000 + getMessageTypeEnumValue(ht.getMessageType()) * 100 + getEntityEnumValue(ht.getSender());
	
};

uint32_t calculateFDID(uint32_t Destination, uint32_t MessageType, uint32_t Sender){
	
	return Destination * 10000 + MessageType * 100 + Sender;
	
};

HeaderType createHeaderFromFDID(uint32_t fdid){
	HeaderType ht;
	
	uint32_t _DestinationInt = (fdid / 10000);
	ht.setDestination(getEntityEnum(_DestinationInt));
    uint32_t _rem = fdid % 10000;

    uint32_t _MessageTypeInt = (_rem /100);
	MessageTypeEnum mt = getMessageTypeEnum(_MessageTypeInt);
	ht.setMessageType(mt);
    uint32_t _SenderInt = (_rem % 100);
	ht.setSender(getEntityEnum(_SenderInt));
	
	return ht;
	
}



uint32_t MSBCANInterface::setup(std::vector<EntityEnum> entityFilter){
	ACANFD_FeatherM4CAN_Settings settings (ACANFD_FeatherM4CAN_Settings::CLOCK_48MHz, 125 * 1000, DataBitRateFactor::x1) ;
	const uint32_t errorCode = can1.beginFD (settings) ;
	
	internalEntityFilter = entityFilter;
	
	return errorCode;
}

void MSBCANInterface::msbLoop(){
	canMsgStruct outMsg;
	CANFDMessage inFrame;

	if (can1.receiveFD0 (inFrame)) {

		HeaderType newHead;
		newHead = createHeaderFromFDID(inFrame.id);
		
		auto itStd = std::find(internalEntityFilter.begin(), internalEntityFilter.end(), newHead.getDestination());

		if (itStd != internalEntityFilter.end()) {
			
			outMsg.header = newHead;
			outMsg.msgFrame = inFrame;
			
			msgQueue.push(outMsg);
		
			if (msgQueue.size() > queueLen){
			
				msgQueue.pop();
			}

		}
	
  }
	
}

canMsgStruct MSBCANInterface::getMessageFromQueue(){
	
	canMsgStruct outMsg = msgQueue.front();
	msgQueue.pop();
	
	return outMsg;
	
}

int MSBCANInterface::getQueueSize(){
	
	return msgQueue.size();
}

uint32_t MSBCANInterface::sendMessage(CANFDMessage msg){
	
	const uint32_t sendStatus = can1.tryToSendReturnStatusFD (msg) ;
	
	return sendStatus;
}


// END Standard Functions
//************************************

canMsgStruct hostToCan(outMsgStruct inStruct){
    canMsgStruct outStruct;
    outStruct.header = inStruct.header;
    MessageTypeEnum mt = inStruct.header.getMessageType();
    if (mt == MessageTypeEnum::NONE){
        ;
    }
    else if (mt == MessageTypeEnum::EntityElectricalStatusMDT){
        EntityElectricalStaus outMsgObj;
        char temp[255];
        inStruct.payload.toCharArray(temp, 255);
        outMsgObj.parseSerialPayload(temp);
        outStruct.msgFrame = outMsgObj.createNewMessage(outStruct.header);
    }
    else if (mt == MessageTypeEnum::EntityTemperatureStatusMDT){
        EntityTemperatureStatus outMsgObj;
        char temp[255];
        inStruct.payload.toCharArray(temp, 255);
        outMsgObj.parseSerialPayload(temp);
        outStruct.msgFrame = outMsgObj.createNewMessage(outStruct.header);
    }
    else if (mt == MessageTypeEnum::EntityStatusMDT){
        EntityStatus outMsgObj;
        char temp[255];
        inStruct.payload.toCharArray(temp, 255);
        outMsgObj.parseSerialPayload(temp);
        outStruct.msgFrame = outMsgObj.createNewMessage(outStruct.header);
    }
    else if (mt == MessageTypeEnum::SetEntityStateMDT){
        SetEntityState outMsgObj;
        char temp[255];
        inStruct.payload.toCharArray(temp, 255);
        outMsgObj.parseSerialPayload(temp);
        outStruct.msgFrame = outMsgObj.createNewMessage(outStruct.header);
    }
    return outStruct;
}

outMsgStruct canToHost(canMsgStruct inStruct){
    outMsgStruct outStruct;
    outStruct.header = inStruct.header;
    MessageTypeEnum mt = inStruct.header.getMessageType();
    if (mt == MessageTypeEnum::NONE){
        ;
    }
    else if (mt == MessageTypeEnum::EntityElectricalStatusMDT){
        EntityElectricalStaus outMsgObj;
        outMsgObj.updateFromFDMessage(inStruct.msgFrame);
        outStruct.payload = outMsgObj.createSerialPayload();
    }
    else if (mt == MessageTypeEnum::EntityTemperatureStatusMDT){
        EntityTemperatureStatus outMsgObj;
        outMsgObj.updateFromFDMessage(inStruct.msgFrame);
        outStruct.payload = outMsgObj.createSerialPayload();
    }
    else if (mt == MessageTypeEnum::EntityStatusMDT){
        EntityStatus outMsgObj;
        outMsgObj.updateFromFDMessage(inStruct.msgFrame);
        outStruct.payload = outMsgObj.createSerialPayload();
    }
    else if (mt == MessageTypeEnum::SetEntityStateMDT){
        SetEntityState outMsgObj;
        outMsgObj.updateFromFDMessage(inStruct.msgFrame);
        outStruct.payload = outMsgObj.createSerialPayload();
    }
    return outStruct;
}

//************************************
// Start Footer


// END File
//************************************