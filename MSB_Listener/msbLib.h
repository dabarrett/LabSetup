/*
	Auto generated by Don Barrett
*/

#include <ACANFD_FeatherM4CAN-from-cpp.h>
#include <ACANFD_FeatherM4CAN_CANFDMessage.h>
#include <string>
#include <queue>
#include <vector>
#include <algorithm>

#ifndef msbLib_h
#define msbLib_h

extern const byte payloadSize;
extern const byte headerSize;

// END Header
//************************************


/*------------------------------------------------------------------------------
#    START Code for EntityEnum
#------------------------------------------------------------------------------*/

enum class EntityEnum{

    ALL = 0,
    STEREO_MANAGER = 1,
    STEREO_COMPUTER = 2,
    HEADUNIT_COMPUTER = 3,
    LAB_MONITOR = 4,
    HEADUNIT_MANAGER = 5,
    NONE = 6,
};

EntityEnum getEntityEnum(uint32_t integerVal);
uint32_t getEntityEnumValue(EntityEnum e);

String getEntityEnumString(EntityEnum e);


/*------------------------------------------------------------------------------
#     END Code for EntityEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for MessageTypeEnum
#------------------------------------------------------------------------------*/

enum class MessageTypeEnum{

    EntityElectricalStatusMDT = 0,
    EntityTemperatureStatusMDT = 1,
    EntityStatusMDT = 2,
    SetEntityStateMDT = 3,
    NONE = 4,
};

MessageTypeEnum getMessageTypeEnum(uint32_t integerVal);
uint32_t getMessageTypeEnumValue(MessageTypeEnum e);

String getMessageTypeEnumString(MessageTypeEnum e);


/*------------------------------------------------------------------------------
#     END Code for MessageTypeEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for EntityStateEnum
#------------------------------------------------------------------------------*/

enum class EntityStateEnum{

    LOW_POWER = 0,
    STARTING = 1,
    OPERATING = 2,
    SHUTTING_DOWN = 3,
    FAULT = 4,
    RESETTING = 5,
    NONE = 6,
};

EntityStateEnum getEntityStateEnum(uint32_t integerVal);
uint32_t getEntityStateEnumValue(EntityStateEnum e);

String getEntityStateEnumString(EntityStateEnum e);


/*------------------------------------------------------------------------------
#     END Code for EntityStateEnum
#------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
#    START Code for WifiStateEnum
#------------------------------------------------------------------------------*/

enum class WifiStateEnum{

    ENABLED = 0,
    DISABLED = 1,
    NONE = 2,
};

WifiStateEnum getWifiStateEnum(uint32_t integerVal);
uint32_t getWifiStateEnumValue(WifiStateEnum e);

String getWifiStateEnumString(WifiStateEnum e);


/*------------------------------------------------------------------------------
#     END Code for WifiStateEnum
#------------------------------------------------------------------------------*/

class HeaderType{

    public:
        EntityEnum getDestination();
        void setDestination(EntityEnum Destination);

        MessageTypeEnum getMessageType();
        void setMessageType(MessageTypeEnum MessageType);

        EntityEnum getSender();
        void setSender(EntityEnum Sender);


    private:
        EntityEnum _Destination;
        MessageTypeEnum _MessageType;
        EntityEnum _Sender;
};

class MSBMessageBasetype{

    public:
        HeaderType getHeader();
        void setHeader(HeaderType Header);


    private:
        HeaderType _Header;
};

class EntityElectricalStaus{

    public:
        EntityEnum getEntityID();
        void setEntityID(EntityEnum EntityID);

        int16_t getCurrent();
        void setCurrent(int16_t Current);

        int16_t getVoltage();
        void setVoltage(int16_t Voltage);

        int16_t getPower();
        void setPower(int16_t Power);

        CANFDMessage createNewMessage(HeaderType ht);

        void clearMessage();

        void updateFromFDMessage(CANFDMessage fdMsg);

        String createSerialPayload();

        void parseSerialPayload(char payload[255]);

        void parseSerialPayload(String payload);


    private:
        EntityEnum _EntityID = EntityEnum::NONE;
        int16_t _Current = 0;
        int16_t _Voltage = 0;
        int16_t _Power = 0;
};

class EntityTemperatureStatus{

    public:
        EntityEnum getEntityID();
        void setEntityID(EntityEnum EntityID);

        int16_t getTemperature();
        void setTemperature(int16_t Temperature);

        CANFDMessage createNewMessage(HeaderType ht);

        void clearMessage();

        void updateFromFDMessage(CANFDMessage fdMsg);

        String createSerialPayload();

        void parseSerialPayload(char payload[255]);

        void parseSerialPayload(String payload);


    private:
        EntityEnum _EntityID = EntityEnum::NONE;
        int16_t _Temperature = 0;
};

class EntityStatus{

    public:
        EntityEnum getEntityID();
        void setEntityID(EntityEnum EntityID);

        EntityStateEnum getState();
        void setState(EntityStateEnum State);

        int16_t getErrorFlag();
        void setErrorFlag(int16_t ErrorFlag);

        CANFDMessage createNewMessage(HeaderType ht);

        void clearMessage();

        void updateFromFDMessage(CANFDMessage fdMsg);

        String createSerialPayload();

        void parseSerialPayload(char payload[255]);

        void parseSerialPayload(String payload);


    private:
        EntityEnum _EntityID = EntityEnum::NONE;
        EntityStateEnum _State = EntityStateEnum::NONE;
        int16_t _ErrorFlag = 0;
};

class SetEntityState{

    public:
        EntityEnum getEntityID();
        void setEntityID(EntityEnum EntityID);

        EntityStateEnum getTargetState();
        void setTargetState(EntityStateEnum TargetState);

        CANFDMessage createNewMessage(HeaderType ht);

        void clearMessage();

        void updateFromFDMessage(CANFDMessage fdMsg);

        String createSerialPayload();

        void parseSerialPayload(char payload[255]);

        void parseSerialPayload(String payload);


    private:
        EntityEnum _EntityID = EntityEnum::NONE;
        EntityStateEnum _TargetState = EntityStateEnum::NONE;
};

//************************************
// Start Standard Functions



class GenericSerialMessage{

	public:
		uint32_t getIDstr();
		void setIDstr(uint32_t IDstr);
		
		void readSerialMessage(std::string s);
		
		EntityEnum getDestination();
		MessageTypeEnum getMessageType();
        EntityEnum getSender();

	private:
		uint32_t _IDstr;
		EntityEnum _Destination;
		MessageTypeEnum _MessageType;
        EntityEnum _Sender;

};

struct outMsgStruct{
  HeaderType header;
  String payload;
};

enum class ShuttingDownStateEnum{
	Operating = 0,
	ShuttingDown = 1,
	SoftShutdownFailed = 2,
	
};

struct canMsgStruct{
  HeaderType header;
  CANFDMessage msgFrame;
};

class MSBCANInterface{
	
	public:
	
		uint32_t setup(std::vector<EntityEnum> entityFilter);
		
		void msbLoop();
		canMsgStruct getMessageFromQueue();
		
		uint32_t sendMessage(CANFDMessage msg);
		
		int getQueueSize();
		int queueLen = 5;
		uint32_t errorCode;
		
	private:
	
		void parseMessageFromBuffer();
		std::queue<canMsgStruct> msgQueue;
		
		std::vector<EntityEnum> internalEntityFilter;
	
};

uint32_t calculateFDID(uint32_t Destination, uint32_t MessageType, uint32_t Sender);
uint32_t calculateFDID(HeaderType ht);
HeaderType createHeaderFromFDID(uint32_t fdid);

// END Standard Functions
//************************************
canMsgStruct hostToCan(outMsgStruct inStruct);
outMsgStruct canToHost(canMsgStruct inStruct);
//************************************
// Start Footer

#endif

// END File
//************************************